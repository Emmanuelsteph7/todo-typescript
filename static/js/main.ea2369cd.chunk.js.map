{"version":3,"sources":["components/header/Header.tsx","components/singleTodo/SingleTodo.tsx","components/todoList/TodoList.tsx","App.tsx","index.tsx"],"names":["Header","todo","setTodo","handleAddTodo","className","onSubmit","type","value","onChange","e","target","SingleTodo","index","todos","setTodos","completedTodos","setCompletedTodos","useState","edit","setEdit","editText","setEditText","inputRef","useRef","useEffect","current","focus","draggableId","id","toString","provided","snapshot","isDragging","draggableProps","dragHandleProps","ref","innerRef","preventDefault","map","handleSubmit","isCompleted","onClick","prev","filter","item","TodoList","droppableId","isDraggingOver","droppableProps","placeholder","App","onDragEnd","result","source","destination","add","active","complete","splice","Date","now","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea2369cd.chunk.js","sourcesContent":["import { FC } from \"react\";\r\nimport \"./header.scss\";\r\n\r\ninterface Props {\r\n  todo: string;\r\n  setTodo: React.Dispatch<React.SetStateAction<string>>;\r\n  handleAddTodo: (e: React.FormEvent) => void;\r\n}\r\n\r\nconst Header: FC<Props> = ({ todo, setTodo, handleAddTodo }) => {\r\n  return (\r\n    <div className=\"header\" onSubmit={handleAddTodo}>\r\n      <h1 className=\"header__header\">Eming Tasks</h1>\r\n      <form className=\"header__form\">\r\n        <div className=\"header__inputDiv\">\r\n          <input\r\n            type=\"text\"\r\n            value={todo}\r\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n              setTodo(e.target.value)\r\n            }\r\n            className=\"header__input\"\r\n          />\r\n        </div>\r\n        <div className=\"header__submit\">\r\n          <button className=\"header__button\" type=\"submit\">\r\n            Add Task\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { Todo } from \"model/todoInterface\";\r\nimport { AiFillEdit, AiFillDelete } from \"react-icons/ai\";\r\nimport { MdDone } from \"react-icons/md\";\r\nimport { FC, useEffect, useRef, useState } from \"react\";\r\nimport \"./singleTodo.scss\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\n\r\ninterface Props {\r\n  index: number;\r\n  todo: Todo;\r\n  todos: Todo[];\r\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>;\r\n  completedTodos: Todo[];\r\n  setCompletedTodos: React.Dispatch<React.SetStateAction<Todo[]>>;\r\n}\r\n\r\nconst SingleTodo: FC<Props> = ({\r\n  index,\r\n  todo,\r\n  todos,\r\n  setTodos,\r\n  completedTodos,\r\n  setCompletedTodos,\r\n}) => {\r\n  const [edit, setEdit] = useState<boolean>(false);\r\n  const [editText, setEditText] = useState<string>(todo.todo);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current?.focus();\r\n  }, [edit]);\r\n\r\n  const handleEdit = () => {\r\n    if (!edit && !todo.isCompleted) {\r\n      setEdit(!edit);\r\n    }\r\n  };\r\n\r\n  const handleDelete = (id: number) => {\r\n    setTodos((prev) => {\r\n      return prev.filter((item) => item.id !== id);\r\n    });\r\n  };\r\n\r\n  const handleCompleted = (id: number) => {\r\n    setTodos(\r\n      todos.map((todo) =>\r\n        todo.id === id ? { ...todo, isCompleted: !todo.isCompleted } : todo\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>, id: number) => {\r\n    e.preventDefault();\r\n\r\n    setTodos(\r\n      todos.map((todo) => (todo.id === id ? { ...todo, todo: editText } : todo))\r\n    );\r\n    setEdit(false);\r\n  };\r\n\r\n  return (\r\n    <Draggable draggableId={todo.id.toString()} index={index}>\r\n      {(provided, snapshot) => (\r\n        <div\r\n          className={`singleTodo ${snapshot.isDragging ? \"active\" : \"\"}`}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          ref={provided.innerRef}\r\n        >\r\n          <form\r\n            className=\"singleTodo__form\"\r\n            onSubmit={(e) => handleSubmit(e, todo.id)}\r\n          >\r\n            {edit ? (\r\n              <input\r\n                type=\"text\"\r\n                ref={inputRef}\r\n                value={editText}\r\n                onChange={(e) => setEditText(e.target.value)}\r\n                className=\"singleTodo__input\"\r\n              />\r\n            ) : todo.isCompleted ? (\r\n              <s className=\"singleTodo__text\">{todo.todo}</s>\r\n            ) : (\r\n              <span className=\"singleTodo__text\">{todo.todo}</span>\r\n            )}\r\n            <div className=\"singleTodo__icons\">\r\n              <AiFillEdit onClick={() => handleEdit()} />\r\n              <AiFillDelete onClick={() => handleDelete(todo.id)} />\r\n              <MdDone onClick={() => handleCompleted(todo.id)} />\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default SingleTodo;\r\n","import SingleTodo from \"../singleTodo/SingleTodo\";\r\nimport { Todo } from \"model/todoInterface\";\r\nimport React, { FC } from \"react\";\r\nimport \"./todoList.scss\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\n\r\ninterface Props {\r\n  todos: Todo[];\r\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>;\r\n  completedTodos: Todo[];\r\n  setCompletedTodos: React.Dispatch<React.SetStateAction<Todo[]>>;\r\n}\r\n\r\nconst TodoList: FC<Props> = ({\r\n  todos,\r\n  setTodos,\r\n  completedTodos,\r\n  setCompletedTodos,\r\n}) => {\r\n  return (\r\n    <div className=\"todoList\">\r\n      <div className=\"todoList__container\">\r\n        <Droppable droppableId=\"activeTasks\">\r\n          {(provided, snapshot) => (\r\n            <div\r\n              className={`todoList__activeTasks ${\r\n                snapshot.isDraggingOver ? \"active\" : \"\"\r\n              }`}\r\n              ref={provided.innerRef}\r\n              {...provided.droppableProps}\r\n            >\r\n              <h3 className=\"todoList__header\">Active Tasks</h3>\r\n              {todos.map((todo, index) => (\r\n                <SingleTodo\r\n                  index={index}\r\n                  todo={todo}\r\n                  todos={todos}\r\n                  setTodos={setTodos}\r\n                  completedTodos={completedTodos}\r\n                  setCompletedTodos={setCompletedTodos}\r\n                  key={todo.id}\r\n                />\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n        <Droppable droppableId=\"completedTasks\">\r\n          {(provided, snapshot) => (\r\n            <div\r\n              className={`todoList__completedTasks ${\r\n                snapshot.isDraggingOver ? \"active\" : \"\"\r\n              }`}\r\n              ref={provided.innerRef}\r\n              {...provided.droppableProps}\r\n            >\r\n              <h3 className=\"todoList__header\">Completed Tasks</h3>\r\n              {completedTodos.map((todo, index) => (\r\n                <SingleTodo\r\n                  index={index}\r\n                  todo={todo}\r\n                  todos={completedTodos}\r\n                  setTodos={setCompletedTodos}\r\n                  completedTodos={completedTodos}\r\n                  setCompletedTodos={setCompletedTodos}\r\n                  key={todo.id}\r\n                />\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import { Header, TodoList } from \"./components\";\nimport { Todo } from \"model/todoInterface\";\nimport React, { FC, useState } from \"react\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\n\nconst App: FC = () => {\n  const [todo, setTodo] = useState<string>(\"\");\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [completedTodos, setCompletedTodos] = useState<Todo[]>([]);\n\n  const handleAddTodo = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (todo) {\n      setTodos([\n        ...todos,\n        {\n          id: Date.now(),\n          todo,\n          isCompleted: false,\n        },\n      ]);\n\n      setTodo(\"\");\n    }\n  };\n\n  const handleDragEnd = (result: DropResult) => {\n    const { source, destination } = result;\n\n    if (!destination) return;\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    )\n      return;\n\n    let add,\n      active = todos,\n      complete = completedTodos;\n\n    if (source.droppableId === \"activeTasks\") {\n      add = active[source.index];\n      active.splice(source.index, 1);\n    } else {\n      add = complete[source.index];\n      complete.splice(source.index, 1);\n    }\n\n    if (destination.droppableId === \"activeTasks\") {\n      active.splice(destination.index, 0, add);\n    } else {\n      complete.splice(destination.index, 0, add);\n    }\n\n    setCompletedTodos(complete);\n    setTodos(active);\n  };\n\n  return (\n    <>\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <Header todo={todo} setTodo={setTodo} handleAddTodo={handleAddTodo} />\n        <TodoList\n          completedTodos={completedTodos}\n          setCompletedTodos={setCompletedTodos}\n          todos={todos}\n          setTodos={setTodos}\n        />\n      </DragDropContext>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}